// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: gophertask/gophertaskapi/v1/subtask_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SubtaskServiceV1_AddSubtask_FullMethodName     = "/gophertask.gophertaskapi.v1.SubtaskServiceV1/AddSubtask"
	SubtaskServiceV1_UpdateSubtask_FullMethodName  = "/gophertask.gophertaskapi.v1.SubtaskServiceV1/UpdateSubtask"
	SubtaskServiceV1_DeleteSubtask_FullMethodName  = "/gophertask.gophertaskapi.v1.SubtaskServiceV1/DeleteSubtask"
	SubtaskServiceV1_GetSubtaskByID_FullMethodName = "/gophertask.gophertaskapi.v1.SubtaskServiceV1/GetSubtaskByID"
	SubtaskServiceV1_GetSubtasks_FullMethodName    = "/gophertask.gophertaskapi.v1.SubtaskServiceV1/GetSubtasks"
)

// SubtaskServiceV1Client is the client API for SubtaskServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubtaskServiceV1Client interface {
	AddSubtask(ctx context.Context, in *AddSubtaskRequestV1, opts ...grpc.CallOption) (*AddSubtaskResponseV1, error)
	UpdateSubtask(ctx context.Context, in *UpdateSubtaskRequestV1, opts ...grpc.CallOption) (*UpdateSubtaskResponseV1, error)
	DeleteSubtask(ctx context.Context, in *DeleteSubtaskRequestV1, opts ...grpc.CallOption) (*DeleteSubtaskResponseV1, error)
	GetSubtaskByID(ctx context.Context, in *GetSubtaskByIDRequestV1, opts ...grpc.CallOption) (*GetSubtaskByIDResponseV1, error)
	GetSubtasks(ctx context.Context, in *GetSubtasksRequestV1, opts ...grpc.CallOption) (*GetSubtasksResponseV1, error)
}

type subtaskServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSubtaskServiceV1Client(cc grpc.ClientConnInterface) SubtaskServiceV1Client {
	return &subtaskServiceV1Client{cc}
}

func (c *subtaskServiceV1Client) AddSubtask(ctx context.Context, in *AddSubtaskRequestV1, opts ...grpc.CallOption) (*AddSubtaskResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSubtaskResponseV1)
	err := c.cc.Invoke(ctx, SubtaskServiceV1_AddSubtask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskServiceV1Client) UpdateSubtask(ctx context.Context, in *UpdateSubtaskRequestV1, opts ...grpc.CallOption) (*UpdateSubtaskResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSubtaskResponseV1)
	err := c.cc.Invoke(ctx, SubtaskServiceV1_UpdateSubtask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskServiceV1Client) DeleteSubtask(ctx context.Context, in *DeleteSubtaskRequestV1, opts ...grpc.CallOption) (*DeleteSubtaskResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSubtaskResponseV1)
	err := c.cc.Invoke(ctx, SubtaskServiceV1_DeleteSubtask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskServiceV1Client) GetSubtaskByID(ctx context.Context, in *GetSubtaskByIDRequestV1, opts ...grpc.CallOption) (*GetSubtaskByIDResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubtaskByIDResponseV1)
	err := c.cc.Invoke(ctx, SubtaskServiceV1_GetSubtaskByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskServiceV1Client) GetSubtasks(ctx context.Context, in *GetSubtasksRequestV1, opts ...grpc.CallOption) (*GetSubtasksResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubtasksResponseV1)
	err := c.cc.Invoke(ctx, SubtaskServiceV1_GetSubtasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtaskServiceV1Server is the server API for SubtaskServiceV1 service.
// All implementations must embed UnimplementedSubtaskServiceV1Server
// for forward compatibility
type SubtaskServiceV1Server interface {
	AddSubtask(context.Context, *AddSubtaskRequestV1) (*AddSubtaskResponseV1, error)
	UpdateSubtask(context.Context, *UpdateSubtaskRequestV1) (*UpdateSubtaskResponseV1, error)
	DeleteSubtask(context.Context, *DeleteSubtaskRequestV1) (*DeleteSubtaskResponseV1, error)
	GetSubtaskByID(context.Context, *GetSubtaskByIDRequestV1) (*GetSubtaskByIDResponseV1, error)
	GetSubtasks(context.Context, *GetSubtasksRequestV1) (*GetSubtasksResponseV1, error)
	mustEmbedUnimplementedSubtaskServiceV1Server()
}

// UnimplementedSubtaskServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedSubtaskServiceV1Server struct {
}

func (UnimplementedSubtaskServiceV1Server) AddSubtask(context.Context, *AddSubtaskRequestV1) (*AddSubtaskResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubtask not implemented")
}
func (UnimplementedSubtaskServiceV1Server) UpdateSubtask(context.Context, *UpdateSubtaskRequestV1) (*UpdateSubtaskResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubtask not implemented")
}
func (UnimplementedSubtaskServiceV1Server) DeleteSubtask(context.Context, *DeleteSubtaskRequestV1) (*DeleteSubtaskResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubtask not implemented")
}
func (UnimplementedSubtaskServiceV1Server) GetSubtaskByID(context.Context, *GetSubtaskByIDRequestV1) (*GetSubtaskByIDResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtaskByID not implemented")
}
func (UnimplementedSubtaskServiceV1Server) GetSubtasks(context.Context, *GetSubtasksRequestV1) (*GetSubtasksResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtasks not implemented")
}
func (UnimplementedSubtaskServiceV1Server) mustEmbedUnimplementedSubtaskServiceV1Server() {}

// UnsafeSubtaskServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubtaskServiceV1Server will
// result in compilation errors.
type UnsafeSubtaskServiceV1Server interface {
	mustEmbedUnimplementedSubtaskServiceV1Server()
}

func RegisterSubtaskServiceV1Server(s grpc.ServiceRegistrar, srv SubtaskServiceV1Server) {
	s.RegisterService(&SubtaskServiceV1_ServiceDesc, srv)
}

func _SubtaskServiceV1_AddSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubtaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServiceV1Server).AddSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtaskServiceV1_AddSubtask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServiceV1Server).AddSubtask(ctx, req.(*AddSubtaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtaskServiceV1_UpdateSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubtaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServiceV1Server).UpdateSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtaskServiceV1_UpdateSubtask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServiceV1Server).UpdateSubtask(ctx, req.(*UpdateSubtaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtaskServiceV1_DeleteSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubtaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServiceV1Server).DeleteSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtaskServiceV1_DeleteSubtask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServiceV1Server).DeleteSubtask(ctx, req.(*DeleteSubtaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtaskServiceV1_GetSubtaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubtaskByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServiceV1Server).GetSubtaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtaskServiceV1_GetSubtaskByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServiceV1Server).GetSubtaskByID(ctx, req.(*GetSubtaskByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtaskServiceV1_GetSubtasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubtasksRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServiceV1Server).GetSubtasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtaskServiceV1_GetSubtasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServiceV1Server).GetSubtasks(ctx, req.(*GetSubtasksRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// SubtaskServiceV1_ServiceDesc is the grpc.ServiceDesc for SubtaskServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubtaskServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophertask.gophertaskapi.v1.SubtaskServiceV1",
	HandlerType: (*SubtaskServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubtask",
			Handler:    _SubtaskServiceV1_AddSubtask_Handler,
		},
		{
			MethodName: "UpdateSubtask",
			Handler:    _SubtaskServiceV1_UpdateSubtask_Handler,
		},
		{
			MethodName: "DeleteSubtask",
			Handler:    _SubtaskServiceV1_DeleteSubtask_Handler,
		},
		{
			MethodName: "GetSubtaskByID",
			Handler:    _SubtaskServiceV1_GetSubtaskByID_Handler,
		},
		{
			MethodName: "GetSubtasks",
			Handler:    _SubtaskServiceV1_GetSubtasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gophertask/gophertaskapi/v1/subtask_service.proto",
}
