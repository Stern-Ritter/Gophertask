// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: gophertask/gophertaskapi/v1/epic_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EpicServiceV1_AddEpic_FullMethodName     = "/gophertask.gophertaskapi.v1.EpicServiceV1/AddEpic"
	EpicServiceV1_UpdateEpic_FullMethodName  = "/gophertask.gophertaskapi.v1.EpicServiceV1/UpdateEpic"
	EpicServiceV1_DeleteEpic_FullMethodName  = "/gophertask.gophertaskapi.v1.EpicServiceV1/DeleteEpic"
	EpicServiceV1_GetEpicByID_FullMethodName = "/gophertask.gophertaskapi.v1.EpicServiceV1/GetEpicByID"
	EpicServiceV1_GetEpics_FullMethodName    = "/gophertask.gophertaskapi.v1.EpicServiceV1/GetEpics"
)

// EpicServiceV1Client is the client API for EpicServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EpicServiceV1Client interface {
	AddEpic(ctx context.Context, in *AddEpicRequestV1, opts ...grpc.CallOption) (*AddEpicResponseV1, error)
	UpdateEpic(ctx context.Context, in *UpdateEpicRequestV1, opts ...grpc.CallOption) (*UpdateEpicResponseV1, error)
	DeleteEpic(ctx context.Context, in *DeleteEpicRequestV1, opts ...grpc.CallOption) (*DeleteEpicResponseV1, error)
	GetEpicByID(ctx context.Context, in *GetEpicByIDRequestV1, opts ...grpc.CallOption) (*GetEpicByIDResponseV1, error)
	GetEpics(ctx context.Context, in *GetEpicsRequestV1, opts ...grpc.CallOption) (*GetEpicsResponseV1, error)
}

type epicServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewEpicServiceV1Client(cc grpc.ClientConnInterface) EpicServiceV1Client {
	return &epicServiceV1Client{cc}
}

func (c *epicServiceV1Client) AddEpic(ctx context.Context, in *AddEpicRequestV1, opts ...grpc.CallOption) (*AddEpicResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEpicResponseV1)
	err := c.cc.Invoke(ctx, EpicServiceV1_AddEpic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epicServiceV1Client) UpdateEpic(ctx context.Context, in *UpdateEpicRequestV1, opts ...grpc.CallOption) (*UpdateEpicResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEpicResponseV1)
	err := c.cc.Invoke(ctx, EpicServiceV1_UpdateEpic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epicServiceV1Client) DeleteEpic(ctx context.Context, in *DeleteEpicRequestV1, opts ...grpc.CallOption) (*DeleteEpicResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEpicResponseV1)
	err := c.cc.Invoke(ctx, EpicServiceV1_DeleteEpic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epicServiceV1Client) GetEpicByID(ctx context.Context, in *GetEpicByIDRequestV1, opts ...grpc.CallOption) (*GetEpicByIDResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEpicByIDResponseV1)
	err := c.cc.Invoke(ctx, EpicServiceV1_GetEpicByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epicServiceV1Client) GetEpics(ctx context.Context, in *GetEpicsRequestV1, opts ...grpc.CallOption) (*GetEpicsResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEpicsResponseV1)
	err := c.cc.Invoke(ctx, EpicServiceV1_GetEpics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpicServiceV1Server is the server API for EpicServiceV1 service.
// All implementations must embed UnimplementedEpicServiceV1Server
// for forward compatibility
type EpicServiceV1Server interface {
	AddEpic(context.Context, *AddEpicRequestV1) (*AddEpicResponseV1, error)
	UpdateEpic(context.Context, *UpdateEpicRequestV1) (*UpdateEpicResponseV1, error)
	DeleteEpic(context.Context, *DeleteEpicRequestV1) (*DeleteEpicResponseV1, error)
	GetEpicByID(context.Context, *GetEpicByIDRequestV1) (*GetEpicByIDResponseV1, error)
	GetEpics(context.Context, *GetEpicsRequestV1) (*GetEpicsResponseV1, error)
	mustEmbedUnimplementedEpicServiceV1Server()
}

// UnimplementedEpicServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedEpicServiceV1Server struct {
}

func (UnimplementedEpicServiceV1Server) AddEpic(context.Context, *AddEpicRequestV1) (*AddEpicResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEpic not implemented")
}
func (UnimplementedEpicServiceV1Server) UpdateEpic(context.Context, *UpdateEpicRequestV1) (*UpdateEpicResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEpic not implemented")
}
func (UnimplementedEpicServiceV1Server) DeleteEpic(context.Context, *DeleteEpicRequestV1) (*DeleteEpicResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEpic not implemented")
}
func (UnimplementedEpicServiceV1Server) GetEpicByID(context.Context, *GetEpicByIDRequestV1) (*GetEpicByIDResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpicByID not implemented")
}
func (UnimplementedEpicServiceV1Server) GetEpics(context.Context, *GetEpicsRequestV1) (*GetEpicsResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpics not implemented")
}
func (UnimplementedEpicServiceV1Server) mustEmbedUnimplementedEpicServiceV1Server() {}

// UnsafeEpicServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpicServiceV1Server will
// result in compilation errors.
type UnsafeEpicServiceV1Server interface {
	mustEmbedUnimplementedEpicServiceV1Server()
}

func RegisterEpicServiceV1Server(s grpc.ServiceRegistrar, srv EpicServiceV1Server) {
	s.RegisterService(&EpicServiceV1_ServiceDesc, srv)
}

func _EpicServiceV1_AddEpic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEpicRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpicServiceV1Server).AddEpic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpicServiceV1_AddEpic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpicServiceV1Server).AddEpic(ctx, req.(*AddEpicRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpicServiceV1_UpdateEpic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEpicRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpicServiceV1Server).UpdateEpic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpicServiceV1_UpdateEpic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpicServiceV1Server).UpdateEpic(ctx, req.(*UpdateEpicRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpicServiceV1_DeleteEpic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEpicRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpicServiceV1Server).DeleteEpic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpicServiceV1_DeleteEpic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpicServiceV1Server).DeleteEpic(ctx, req.(*DeleteEpicRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpicServiceV1_GetEpicByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpicByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpicServiceV1Server).GetEpicByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpicServiceV1_GetEpicByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpicServiceV1Server).GetEpicByID(ctx, req.(*GetEpicByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpicServiceV1_GetEpics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpicsRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpicServiceV1Server).GetEpics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpicServiceV1_GetEpics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpicServiceV1Server).GetEpics(ctx, req.(*GetEpicsRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// EpicServiceV1_ServiceDesc is the grpc.ServiceDesc for EpicServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EpicServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophertask.gophertaskapi.v1.EpicServiceV1",
	HandlerType: (*EpicServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEpic",
			Handler:    _EpicServiceV1_AddEpic_Handler,
		},
		{
			MethodName: "UpdateEpic",
			Handler:    _EpicServiceV1_UpdateEpic_Handler,
		},
		{
			MethodName: "DeleteEpic",
			Handler:    _EpicServiceV1_DeleteEpic_Handler,
		},
		{
			MethodName: "GetEpicByID",
			Handler:    _EpicServiceV1_GetEpicByID_Handler,
		},
		{
			MethodName: "GetEpics",
			Handler:    _EpicServiceV1_GetEpics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gophertask/gophertaskapi/v1/epic_service.proto",
}
