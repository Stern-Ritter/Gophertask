// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: gophertask/gophertaskapi/v1/task_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TaskServiceV1_AddTask_FullMethodName     = "/gophertask.gophertaskapi.v1.TaskServiceV1/AddTask"
	TaskServiceV1_UpdateTask_FullMethodName  = "/gophertask.gophertaskapi.v1.TaskServiceV1/UpdateTask"
	TaskServiceV1_DeleteTask_FullMethodName  = "/gophertask.gophertaskapi.v1.TaskServiceV1/DeleteTask"
	TaskServiceV1_GetTaskByID_FullMethodName = "/gophertask.gophertaskapi.v1.TaskServiceV1/GetTaskByID"
	TaskServiceV1_GetTasks_FullMethodName    = "/gophertask.gophertaskapi.v1.TaskServiceV1/GetTasks"
)

// TaskServiceV1Client is the client API for TaskServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceV1Client interface {
	AddTask(ctx context.Context, in *AddTaskRequestV1, opts ...grpc.CallOption) (*AddTaskResponseV1, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequestV1, opts ...grpc.CallOption) (*UpdateTaskResponseV1, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequestV1, opts ...grpc.CallOption) (*DeleteTaskResponseV1, error)
	GetTaskByID(ctx context.Context, in *GetTaskByIDRequestV1, opts ...grpc.CallOption) (*GetTaskByIDResponseV1, error)
	GetTasks(ctx context.Context, in *GetTasksRequestV1, opts ...grpc.CallOption) (*GetTasksResponseV1, error)
}

type taskServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceV1Client(cc grpc.ClientConnInterface) TaskServiceV1Client {
	return &taskServiceV1Client{cc}
}

func (c *taskServiceV1Client) AddTask(ctx context.Context, in *AddTaskRequestV1, opts ...grpc.CallOption) (*AddTaskResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskResponseV1)
	err := c.cc.Invoke(ctx, TaskServiceV1_AddTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceV1Client) UpdateTask(ctx context.Context, in *UpdateTaskRequestV1, opts ...grpc.CallOption) (*UpdateTaskResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskResponseV1)
	err := c.cc.Invoke(ctx, TaskServiceV1_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceV1Client) DeleteTask(ctx context.Context, in *DeleteTaskRequestV1, opts ...grpc.CallOption) (*DeleteTaskResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskResponseV1)
	err := c.cc.Invoke(ctx, TaskServiceV1_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceV1Client) GetTaskByID(ctx context.Context, in *GetTaskByIDRequestV1, opts ...grpc.CallOption) (*GetTaskByIDResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskByIDResponseV1)
	err := c.cc.Invoke(ctx, TaskServiceV1_GetTaskByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceV1Client) GetTasks(ctx context.Context, in *GetTasksRequestV1, opts ...grpc.CallOption) (*GetTasksResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTasksResponseV1)
	err := c.cc.Invoke(ctx, TaskServiceV1_GetTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceV1Server is the server API for TaskServiceV1 service.
// All implementations must embed UnimplementedTaskServiceV1Server
// for forward compatibility
type TaskServiceV1Server interface {
	AddTask(context.Context, *AddTaskRequestV1) (*AddTaskResponseV1, error)
	UpdateTask(context.Context, *UpdateTaskRequestV1) (*UpdateTaskResponseV1, error)
	DeleteTask(context.Context, *DeleteTaskRequestV1) (*DeleteTaskResponseV1, error)
	GetTaskByID(context.Context, *GetTaskByIDRequestV1) (*GetTaskByIDResponseV1, error)
	GetTasks(context.Context, *GetTasksRequestV1) (*GetTasksResponseV1, error)
	mustEmbedUnimplementedTaskServiceV1Server()
}

// UnimplementedTaskServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceV1Server struct {
}

func (UnimplementedTaskServiceV1Server) AddTask(context.Context, *AddTaskRequestV1) (*AddTaskResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedTaskServiceV1Server) UpdateTask(context.Context, *UpdateTaskRequestV1) (*UpdateTaskResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServiceV1Server) DeleteTask(context.Context, *DeleteTaskRequestV1) (*DeleteTaskResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServiceV1Server) GetTaskByID(context.Context, *GetTaskByIDRequestV1) (*GetTaskByIDResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskByID not implemented")
}
func (UnimplementedTaskServiceV1Server) GetTasks(context.Context, *GetTasksRequestV1) (*GetTasksResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedTaskServiceV1Server) mustEmbedUnimplementedTaskServiceV1Server() {}

// UnsafeTaskServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceV1Server will
// result in compilation errors.
type UnsafeTaskServiceV1Server interface {
	mustEmbedUnimplementedTaskServiceV1Server()
}

func RegisterTaskServiceV1Server(s grpc.ServiceRegistrar, srv TaskServiceV1Server) {
	s.RegisterService(&TaskServiceV1_ServiceDesc, srv)
}

func _TaskServiceV1_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceV1Server).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceV1_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceV1Server).AddTask(ctx, req.(*AddTaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskServiceV1_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceV1Server).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceV1_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceV1Server).UpdateTask(ctx, req.(*UpdateTaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskServiceV1_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceV1Server).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceV1_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceV1Server).DeleteTask(ctx, req.(*DeleteTaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskServiceV1_GetTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceV1Server).GetTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceV1_GetTaskByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceV1Server).GetTaskByID(ctx, req.(*GetTaskByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskServiceV1_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceV1Server).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceV1_GetTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceV1Server).GetTasks(ctx, req.(*GetTasksRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskServiceV1_ServiceDesc is the grpc.ServiceDesc for TaskServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophertask.gophertaskapi.v1.TaskServiceV1",
	HandlerType: (*TaskServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TaskServiceV1_AddTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskServiceV1_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskServiceV1_DeleteTask_Handler,
		},
		{
			MethodName: "GetTaskByID",
			Handler:    _TaskServiceV1_GetTaskByID_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _TaskServiceV1_GetTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gophertask/gophertaskapi/v1/task_service.proto",
}
