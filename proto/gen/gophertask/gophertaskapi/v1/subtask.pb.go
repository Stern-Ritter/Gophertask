// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: gophertask/gophertaskapi/v1/subtask.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubtaskV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EpicId      string                 `protobuf:"bytes,3,opt,name=epic_id,json=epicId,proto3" json:"epic_id,omitempty"`
	Name        string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Status      TaskStatus             `protobuf:"varint,6,opt,name=status,proto3,enum=gophertask.gophertaskapi.v1.TaskStatus" json:"status,omitempty"`
	Duration    *durationpb.Duration   `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	StartedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
}

func (x *SubtaskV1) Reset() {
	*x = SubtaskV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskV1) ProtoMessage() {}

func (x *SubtaskV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskV1.ProtoReflect.Descriptor instead.
func (*SubtaskV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{0}
}

func (x *SubtaskV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubtaskV1) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubtaskV1) GetEpicId() string {
	if x != nil {
		return x.EpicId
	}
	return ""
}

func (x *SubtaskV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubtaskV1) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubtaskV1) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNKNOWN_UNSPECIFIED
}

func (x *SubtaskV1) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SubtaskV1) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

type AddSubtaskRequestV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpicId      string                 `protobuf:"bytes,1,opt,name=epic_id,json=epicId,proto3" json:"epic_id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Duration    *durationpb.Duration   `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	StartedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
}

func (x *AddSubtaskRequestV1) Reset() {
	*x = AddSubtaskRequestV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubtaskRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubtaskRequestV1) ProtoMessage() {}

func (x *AddSubtaskRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubtaskRequestV1.ProtoReflect.Descriptor instead.
func (*AddSubtaskRequestV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{1}
}

func (x *AddSubtaskRequestV1) GetEpicId() string {
	if x != nil {
		return x.EpicId
	}
	return ""
}

func (x *AddSubtaskRequestV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddSubtaskRequestV1) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddSubtaskRequestV1) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *AddSubtaskRequestV1) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

type AddSubtaskResponseV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddSubtaskResponseV1) Reset() {
	*x = AddSubtaskResponseV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubtaskResponseV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubtaskResponseV1) ProtoMessage() {}

func (x *AddSubtaskResponseV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubtaskResponseV1.ProtoReflect.Descriptor instead.
func (*AddSubtaskResponseV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{2}
}

type UpdateSubtaskRequestV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EpicId      string                 `protobuf:"bytes,2,opt,name=epic_id,json=epicId,proto3" json:"epic_id,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status      TaskStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=gophertask.gophertaskapi.v1.TaskStatus" json:"status,omitempty"`
	Duration    *durationpb.Duration   `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	StartedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
}

func (x *UpdateSubtaskRequestV1) Reset() {
	*x = UpdateSubtaskRequestV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubtaskRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubtaskRequestV1) ProtoMessage() {}

func (x *UpdateSubtaskRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubtaskRequestV1.ProtoReflect.Descriptor instead.
func (*UpdateSubtaskRequestV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSubtaskRequestV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSubtaskRequestV1) GetEpicId() string {
	if x != nil {
		return x.EpicId
	}
	return ""
}

func (x *UpdateSubtaskRequestV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSubtaskRequestV1) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSubtaskRequestV1) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNKNOWN_UNSPECIFIED
}

func (x *UpdateSubtaskRequestV1) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *UpdateSubtaskRequestV1) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

type UpdateSubtaskResponseV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSubtaskResponseV1) Reset() {
	*x = UpdateSubtaskResponseV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubtaskResponseV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubtaskResponseV1) ProtoMessage() {}

func (x *UpdateSubtaskResponseV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubtaskResponseV1.ProtoReflect.Descriptor instead.
func (*UpdateSubtaskResponseV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{4}
}

type DeleteSubtaskRequestV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubtaskRequestV1) Reset() {
	*x = DeleteSubtaskRequestV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubtaskRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubtaskRequestV1) ProtoMessage() {}

func (x *DeleteSubtaskRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubtaskRequestV1.ProtoReflect.Descriptor instead.
func (*DeleteSubtaskRequestV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSubtaskRequestV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSubtaskResponseV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSubtaskResponseV1) Reset() {
	*x = DeleteSubtaskResponseV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubtaskResponseV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubtaskResponseV1) ProtoMessage() {}

func (x *DeleteSubtaskResponseV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubtaskResponseV1.ProtoReflect.Descriptor instead.
func (*DeleteSubtaskResponseV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{6}
}

type GetSubtaskByIDRequestV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubtaskByIDRequestV1) Reset() {
	*x = GetSubtaskByIDRequestV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubtaskByIDRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubtaskByIDRequestV1) ProtoMessage() {}

func (x *GetSubtaskByIDRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubtaskByIDRequestV1.ProtoReflect.Descriptor instead.
func (*GetSubtaskByIDRequestV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{7}
}

func (x *GetSubtaskByIDRequestV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSubtaskByIDResponseV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtask *SubtaskV1 `protobuf:"bytes,1,opt,name=subtask,proto3" json:"subtask,omitempty"`
}

func (x *GetSubtaskByIDResponseV1) Reset() {
	*x = GetSubtaskByIDResponseV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubtaskByIDResponseV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubtaskByIDResponseV1) ProtoMessage() {}

func (x *GetSubtaskByIDResponseV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubtaskByIDResponseV1.ProtoReflect.Descriptor instead.
func (*GetSubtaskByIDResponseV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{8}
}

func (x *GetSubtaskByIDResponseV1) GetSubtask() *SubtaskV1 {
	if x != nil {
		return x.Subtask
	}
	return nil
}

type GetSubtasksRequestV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSubtasksRequestV1) Reset() {
	*x = GetSubtasksRequestV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubtasksRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubtasksRequestV1) ProtoMessage() {}

func (x *GetSubtasksRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubtasksRequestV1.ProtoReflect.Descriptor instead.
func (*GetSubtasksRequestV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{9}
}

type GetSubtasksResponseV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtasks []*SubtaskV1 `protobuf:"bytes,1,rep,name=subtasks,proto3" json:"subtasks,omitempty"`
}

func (x *GetSubtasksResponseV1) Reset() {
	*x = GetSubtasksResponseV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubtasksResponseV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubtasksResponseV1) ProtoMessage() {}

func (x *GetSubtasksResponseV1) ProtoReflect() protoreflect.Message {
	mi := &file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubtasksResponseV1.ProtoReflect.Descriptor instead.
func (*GetSubtasksResponseV1) Descriptor() ([]byte, []int) {
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP(), []int{10}
}

func (x *GetSubtasksResponseV1) GetSubtasks() []*SubtaskV1 {
	if x != nil {
		return x.Subtasks
	}
	return nil
}

var File_gophertask_gophertaskapi_v1_subtask_proto protoreflect.FileDescriptor

var file_gophertask_gophertaskapi_v1_subtask_proto_rawDesc = []byte{
	0x0a, 0x29, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x67, 0x6f, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x67, 0x6f, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74, 0x61,
	0x73, 0x6b, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x28, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x61, 0x73, 0x6b, 0x2f, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb6, 0x02, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x56, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb7, 0x03, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56,
	0x31, 0x12, 0x56, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3d, 0xba, 0x48, 0x3a, 0xba, 0x01, 0x37, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x12, 0x1b, 0x45, 0x70, 0x69, 0x63, 0x20, 0x49, 0x44, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0f, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x3d, 0x20,
	0x31, 0x52, 0x06, 0x65, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0xba, 0x48, 0x43, 0xba, 0x01, 0x40, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x20, 0x32, 0x35,
	0x36, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x11, 0x73, 0x69,
	0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32, 0x35, 0x36, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0xba, 0x48, 0x55, 0xba,
	0x01, 0x52, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x20, 0x36,
	0x35, 0x35, 0x33, 0x36, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x13, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x36,
	0x35, 0x35, 0x33, 0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x31, 0x22, 0xc0, 0x04, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x12, 0x43, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0xba, 0x48, 0x30, 0xba, 0x01, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x49, 0x44, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x07, 0x65,
	0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xba, 0x48,
	0x3a, 0xba, 0x01, 0x37, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x1b, 0x45,
	0x70, 0x69, 0x63, 0x20, 0x49, 0x44, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x52, 0x06, 0x65, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x46, 0xba, 0x48, 0x43, 0xba, 0x01, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x20, 0x32, 0x35, 0x36, 0x20, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x11, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32, 0x35, 0x36, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x7a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0xba, 0x48, 0x55, 0xba, 0x01, 0x52, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x20, 0x36, 0x35, 0x35, 0x33, 0x36, 0x20, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x13, 0x73, 0x69, 0x7a, 0x65, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x36, 0x35, 0x35, 0x33, 0x36, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x61, 0x73, 0x6b, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x19,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x31, 0x22, 0x6d, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x56, 0x31, 0x12, 0x53, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x43, 0xba, 0x48, 0x40, 0xba, 0x01, 0x3d, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x26, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x49, 0x44, 0x20,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0f, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20,
	0x3e, 0x3d, 0x20, 0x31, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x31, 0x22, 0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x12, 0x55,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0xba, 0x48, 0x42, 0xba,
	0x01, 0x3f, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x28, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x49, 0x44, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0f, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x3d, 0x20,
	0x31, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x31, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x56, 0x31, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x22, 0x5b, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x31, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x56, 0x31, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x6f, 0x70, 0x68,
	0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x74, 0x61, 0x73,
	0x6b, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gophertask_gophertaskapi_v1_subtask_proto_rawDescOnce sync.Once
	file_gophertask_gophertaskapi_v1_subtask_proto_rawDescData = file_gophertask_gophertaskapi_v1_subtask_proto_rawDesc
)

func file_gophertask_gophertaskapi_v1_subtask_proto_rawDescGZIP() []byte {
	file_gophertask_gophertaskapi_v1_subtask_proto_rawDescOnce.Do(func() {
		file_gophertask_gophertaskapi_v1_subtask_proto_rawDescData = protoimpl.X.CompressGZIP(file_gophertask_gophertaskapi_v1_subtask_proto_rawDescData)
	})
	return file_gophertask_gophertaskapi_v1_subtask_proto_rawDescData
}

var file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_gophertask_gophertaskapi_v1_subtask_proto_goTypes = []any{
	(*SubtaskV1)(nil),                // 0: gophertask.gophertaskapi.v1.SubtaskV1
	(*AddSubtaskRequestV1)(nil),      // 1: gophertask.gophertaskapi.v1.AddSubtaskRequestV1
	(*AddSubtaskResponseV1)(nil),     // 2: gophertask.gophertaskapi.v1.AddSubtaskResponseV1
	(*UpdateSubtaskRequestV1)(nil),   // 3: gophertask.gophertaskapi.v1.UpdateSubtaskRequestV1
	(*UpdateSubtaskResponseV1)(nil),  // 4: gophertask.gophertaskapi.v1.UpdateSubtaskResponseV1
	(*DeleteSubtaskRequestV1)(nil),   // 5: gophertask.gophertaskapi.v1.DeleteSubtaskRequestV1
	(*DeleteSubtaskResponseV1)(nil),  // 6: gophertask.gophertaskapi.v1.DeleteSubtaskResponseV1
	(*GetSubtaskByIDRequestV1)(nil),  // 7: gophertask.gophertaskapi.v1.GetSubtaskByIDRequestV1
	(*GetSubtaskByIDResponseV1)(nil), // 8: gophertask.gophertaskapi.v1.GetSubtaskByIDResponseV1
	(*GetSubtasksRequestV1)(nil),     // 9: gophertask.gophertaskapi.v1.GetSubtasksRequestV1
	(*GetSubtasksResponseV1)(nil),    // 10: gophertask.gophertaskapi.v1.GetSubtasksResponseV1
	(TaskStatus)(0),                  // 11: gophertask.gophertaskapi.v1.TaskStatus
	(*durationpb.Duration)(nil),      // 12: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),    // 13: google.protobuf.Timestamp
}
var file_gophertask_gophertaskapi_v1_subtask_proto_depIdxs = []int32{
	11, // 0: gophertask.gophertaskapi.v1.SubtaskV1.status:type_name -> gophertask.gophertaskapi.v1.TaskStatus
	12, // 1: gophertask.gophertaskapi.v1.SubtaskV1.duration:type_name -> google.protobuf.Duration
	13, // 2: gophertask.gophertaskapi.v1.SubtaskV1.started_at:type_name -> google.protobuf.Timestamp
	12, // 3: gophertask.gophertaskapi.v1.AddSubtaskRequestV1.duration:type_name -> google.protobuf.Duration
	13, // 4: gophertask.gophertaskapi.v1.AddSubtaskRequestV1.started_at:type_name -> google.protobuf.Timestamp
	11, // 5: gophertask.gophertaskapi.v1.UpdateSubtaskRequestV1.status:type_name -> gophertask.gophertaskapi.v1.TaskStatus
	12, // 6: gophertask.gophertaskapi.v1.UpdateSubtaskRequestV1.duration:type_name -> google.protobuf.Duration
	13, // 7: gophertask.gophertaskapi.v1.UpdateSubtaskRequestV1.started_at:type_name -> google.protobuf.Timestamp
	0,  // 8: gophertask.gophertaskapi.v1.GetSubtaskByIDResponseV1.subtask:type_name -> gophertask.gophertaskapi.v1.SubtaskV1
	0,  // 9: gophertask.gophertaskapi.v1.GetSubtasksResponseV1.subtasks:type_name -> gophertask.gophertaskapi.v1.SubtaskV1
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_gophertask_gophertaskapi_v1_subtask_proto_init() }
func file_gophertask_gophertaskapi_v1_subtask_proto_init() {
	if File_gophertask_gophertaskapi_v1_subtask_proto != nil {
		return
	}
	file_gophertask_gophertaskapi_v1_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SubtaskV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AddSubtaskRequestV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AddSubtaskResponseV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSubtaskRequestV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSubtaskResponseV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteSubtaskRequestV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteSubtaskResponseV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubtaskByIDRequestV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubtaskByIDResponseV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubtasksRequestV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubtasksResponseV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gophertask_gophertaskapi_v1_subtask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gophertask_gophertaskapi_v1_subtask_proto_goTypes,
		DependencyIndexes: file_gophertask_gophertaskapi_v1_subtask_proto_depIdxs,
		MessageInfos:      file_gophertask_gophertaskapi_v1_subtask_proto_msgTypes,
	}.Build()
	File_gophertask_gophertaskapi_v1_subtask_proto = out.File
	file_gophertask_gophertaskapi_v1_subtask_proto_rawDesc = nil
	file_gophertask_gophertaskapi_v1_subtask_proto_goTypes = nil
	file_gophertask_gophertaskapi_v1_subtask_proto_depIdxs = nil
}
