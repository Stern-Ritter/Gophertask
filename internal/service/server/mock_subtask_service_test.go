// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/server/subtask_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/server/subtask_service.go -destination ./internal/service/server/mock_subtask_service_test.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	model "github.com/Stern-Ritter/gophertask/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSubtaskService is a mock of SubtaskService interface.
type MockSubtaskService struct {
	ctrl     *gomock.Controller
	recorder *MockSubtaskServiceMockRecorder
}

// MockSubtaskServiceMockRecorder is the mock recorder for MockSubtaskService.
type MockSubtaskServiceMockRecorder struct {
	mock *MockSubtaskService
}

// NewMockSubtaskService creates a new mock instance.
func NewMockSubtaskService(ctrl *gomock.Controller) *MockSubtaskService {
	mock := &MockSubtaskService{ctrl: ctrl}
	mock.recorder = &MockSubtaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubtaskService) EXPECT() *MockSubtaskServiceMockRecorder {
	return m.recorder
}

// CreateSubtask mocks base method.
func (m *MockSubtaskService) CreateSubtask(ctx context.Context, subtask model.Subtask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubtask", ctx, subtask)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubtask indicates an expected call of CreateSubtask.
func (mr *MockSubtaskServiceMockRecorder) CreateSubtask(ctx, subtask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubtask", reflect.TypeOf((*MockSubtaskService)(nil).CreateSubtask), ctx, subtask)
}

// DeleteSubtask mocks base method.
func (m *MockSubtaskService) DeleteSubtask(ctx context.Context, userID, subtaskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubtask", ctx, userID, subtaskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubtask indicates an expected call of DeleteSubtask.
func (mr *MockSubtaskServiceMockRecorder) DeleteSubtask(ctx, userID, subtaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubtask", reflect.TypeOf((*MockSubtaskService)(nil).DeleteSubtask), ctx, userID, subtaskID)
}

// GetAllSubtasks mocks base method.
func (m *MockSubtaskService) GetAllSubtasks(ctx context.Context, userID string) ([]model.Subtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubtasks", ctx, userID)
	ret0, _ := ret[0].([]model.Subtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubtasks indicates an expected call of GetAllSubtasks.
func (mr *MockSubtaskServiceMockRecorder) GetAllSubtasks(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubtasks", reflect.TypeOf((*MockSubtaskService)(nil).GetAllSubtasks), ctx, userID)
}

// GetSubtaskByID mocks base method.
func (m *MockSubtaskService) GetSubtaskByID(ctx context.Context, userID, subtaskID string) (model.Subtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubtaskByID", ctx, userID, subtaskID)
	ret0, _ := ret[0].(model.Subtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubtaskByID indicates an expected call of GetSubtaskByID.
func (mr *MockSubtaskServiceMockRecorder) GetSubtaskByID(ctx, userID, subtaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubtaskByID", reflect.TypeOf((*MockSubtaskService)(nil).GetSubtaskByID), ctx, userID, subtaskID)
}

// UpdateSubtask mocks base method.
func (m *MockSubtaskService) UpdateSubtask(ctx context.Context, subtask model.Subtask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubtask", ctx, subtask)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubtask indicates an expected call of UpdateSubtask.
func (mr *MockSubtaskServiceMockRecorder) UpdateSubtask(ctx, subtask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubtask", reflect.TypeOf((*MockSubtaskService)(nil).UpdateSubtask), ctx, subtask)
}
