// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/server/subtask_storage.go
//
// Generated by this command:
//
//	mockgen -source=./internal/storage/server/subtask_storage.go -destination ./internal/service/server/mock_subtask_storage_test.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	model "github.com/Stern-Ritter/gophertask/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSubtaskStorage is a mock of SubtaskStorage interface.
type MockSubtaskStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSubtaskStorageMockRecorder
}

// MockSubtaskStorageMockRecorder is the mock recorder for MockSubtaskStorage.
type MockSubtaskStorageMockRecorder struct {
	mock *MockSubtaskStorage
}

// NewMockSubtaskStorage creates a new mock instance.
func NewMockSubtaskStorage(ctrl *gomock.Controller) *MockSubtaskStorage {
	mock := &MockSubtaskStorage{ctrl: ctrl}
	mock.recorder = &MockSubtaskStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubtaskStorage) EXPECT() *MockSubtaskStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubtaskStorage) Create(ctx context.Context, subtask model.Subtask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, subtask)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubtaskStorageMockRecorder) Create(ctx, subtask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubtaskStorage)(nil).Create), ctx, subtask)
}

// Delete mocks base method.
func (m *MockSubtaskStorage) Delete(ctx context.Context, subtaskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, subtaskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubtaskStorageMockRecorder) Delete(ctx, subtaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubtaskStorage)(nil).Delete), ctx, subtaskID)
}

// GetAll mocks base method.
func (m *MockSubtaskStorage) GetAll(ctx context.Context, userID string) ([]model.Subtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]model.Subtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubtaskStorageMockRecorder) GetAll(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubtaskStorage)(nil).GetAll), ctx, userID)
}

// GetByID mocks base method.
func (m *MockSubtaskStorage) GetByID(ctx context.Context, subtaskID string) (model.Subtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, subtaskID)
	ret0, _ := ret[0].(model.Subtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSubtaskStorageMockRecorder) GetByID(ctx, subtaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSubtaskStorage)(nil).GetByID), ctx, subtaskID)
}

// Update mocks base method.
func (m *MockSubtaskStorage) Update(ctx context.Context, subtask model.Subtask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, subtask)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSubtaskStorageMockRecorder) Update(ctx, subtask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubtaskStorage)(nil).Update), ctx, subtask)
}
